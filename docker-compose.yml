version: '3.8'

services:
  ## MySQL Docker Compose Config for Order Service
  mysql-order:
    container_name: mysql-order
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: order-service
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-order:/var/lib/mysql
    restart: unless-stopped

  ## MySQL Docker Compose Config for Inventory Service
  mysql-inventory:
    container_name: mysql-inventory
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: inventory-service
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - "3307:3306"
    volumes:
      - ./mysql-inventory:/var/lib/mysql
    restart: unless-stopped

  ## MongoDB Docker Compose Config for Product Service
  mongodb:
    container_name: mongodb
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongodb
      MONGO_INITDB_DATABASE: product-service
    volumes:
      - ./mongodb-data:/data/db
    restart: unless-stopped

  ## Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped

  ## Kafka
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    restart: unless-stopped

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped

  ## Eureka Server
  discovery-server:
    image: registry.hub.docker.com/dhruv7004/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped

  ## API Gateway
  api-gateway:
    image: registry.hub.docker.com/dhruv7004/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - zipkin
      - discovery-server
    restart: unless-stopped

  ## Product Service
  product-service:
    image: registry.hub.docker.com/dhruv7004/product-service:latest
    container_name: product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_HOST=mongodb
      - SPRING_DATA_MONGODB_PORT=27017
      - SPRING_DATA_MONGODB_DATABASE=product-service
      - SPRING_DATA_MONGODB_USERNAME=root
      - SPRING_DATA_MONGODB_PASSWORD=mongodb
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - mongodb
      - discovery-server
      - zipkin
    restart: unless-stopped

  ## Order Service
  order-service:
    image: registry.hub.docker.com/dhruv7004/order-service:latest
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:3306/order-service?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=mysql
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
    depends_on:
      - mysql-order
      - broker
      - zipkin
      - discovery-server
      - inventory-service
    restart: unless-stopped

  ## Inventory Service
  inventory-service:
    image: registry.hub.docker.com/dhruv7004/inventory-service:latest
    container_name: inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-inventory:3306/inventory-service?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=mysql
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - mysql-inventory
      - discovery-server
      - zipkin
    restart: unless-stopped

  ## Notification Service
  notification-service:
    image: registry.hub.docker.com/dhruv7004/notification-service:latest
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
    depends_on:
      - broker
      - zipkin
      - discovery-server
    restart: unless-stopped

volumes:
  mysql-order:
  mysql-inventory:
  mongodb-data:
